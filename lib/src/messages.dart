// Autogenerated from Pigeon (v0.1.21), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/services.dart';

class TriggerRegisterArg {
  String? androidDefaultPlatform;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['androidDefaultPlatform'] = androidDefaultPlatform;
    return pigeonMap;
  }

  static TriggerRegisterArg decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TriggerRegisterArg()
      ..androidDefaultPlatform = pigeonMap['androidDefaultPlatform'] as String?;
  }
}

class IosRegisterCallbackArg {
  bool? success;
  String? deviceToken;
  String? errorMessage;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['success'] = success;
    pigeonMap['deviceToken'] = deviceToken;
    pigeonMap['errorMessage'] = errorMessage;
    return pigeonMap;
  }

  static IosRegisterCallbackArg decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return IosRegisterCallbackArg()
      ..success = pigeonMap['success'] as bool?
      ..deviceToken = pigeonMap['deviceToken'] as String?
      ..errorMessage = pigeonMap['errorMessage'] as String?;
  }
}

class AndroidOnRegisterSucceedCallbackArg {
  String? platformName;
  String? regId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['platformName'] = platformName;
    pigeonMap['regId'] = regId;
    return pigeonMap;
  }

  static AndroidOnRegisterSucceedCallbackArg decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AndroidOnRegisterSucceedCallbackArg()
      ..platformName = pigeonMap['platformName'] as String?
      ..regId = pigeonMap['regId'] as String?;
  }
}

class AndroidGetRegisterIdCallbackArg {
  bool? success;
  String? platformName;
  String? regId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['success'] = success;
    pigeonMap['platformName'] = platformName;
    pigeonMap['regId'] = regId;
    return pigeonMap;
  }

  static AndroidGetRegisterIdCallbackArg decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AndroidGetRegisterIdCallbackArg()
      ..success = pigeonMap['success'] as bool?
      ..platformName = pigeonMap['platformName'] as String?
      ..regId = pigeonMap['regId'] as String?;
  }
}

class FlutterPushNotificationHostApi {
  Future<void> triggerRegister(TriggerRegisterArg arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.FlutterPushNotificationHostApi.triggerRegister', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = replyMap['error'] as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> androidGetRegisterId() async {
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.FlutterPushNotificationHostApi.androidGetRegisterId', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = replyMap['error'] as Map<Object?, Object?>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

abstract class FlutterPushNotificationFlutterApi {
  void iosRegisterCallback(IosRegisterCallbackArg arg);
  void androidOnRegisterSucceedCallback(AndroidOnRegisterSucceedCallbackArg arg);
  void androidGetRegisterIdCallback(AndroidGetRegisterIdCallbackArg arg);
  static void setup(FlutterPushNotificationFlutterApi? api) {
    {
      const BasicMessageChannel<Object?> channel =
          BasicMessageChannel<Object?>('dev.flutter.pigeon.FlutterPushNotificationFlutterApi.iosRegisterCallback', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FlutterPushNotificationFlutterApi.iosRegisterCallback was null. Expected IosRegisterCallbackArg.');
          final IosRegisterCallbackArg input = IosRegisterCallbackArg.decode(message!);
          api.iosRegisterCallback(input);
          return;
        });
      }
    }
    {
      const BasicMessageChannel<Object?> channel =
          BasicMessageChannel<Object?>('dev.flutter.pigeon.FlutterPushNotificationFlutterApi.androidOnRegisterSucceedCallback', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FlutterPushNotificationFlutterApi.androidOnRegisterSucceedCallback was null. Expected AndroidOnRegisterSucceedCallbackArg.');
          final AndroidOnRegisterSucceedCallbackArg input = AndroidOnRegisterSucceedCallbackArg.decode(message!);
          api.androidOnRegisterSucceedCallback(input);
          return;
        });
      }
    }
    {
      const BasicMessageChannel<Object?> channel =
          BasicMessageChannel<Object?>('dev.flutter.pigeon.FlutterPushNotificationFlutterApi.androidGetRegisterIdCallback', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FlutterPushNotificationFlutterApi.androidGetRegisterIdCallback was null. Expected AndroidGetRegisterIdCallbackArg.');
          final AndroidGetRegisterIdCallbackArg input = AndroidGetRegisterIdCallbackArg.decode(message!);
          api.androidGetRegisterIdCallback(input);
          return;
        });
      }
    }
  }
}
