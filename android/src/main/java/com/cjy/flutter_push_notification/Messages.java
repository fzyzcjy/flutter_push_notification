// Autogenerated from Pigeon (v0.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.cjy.flutter_push_notification;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.ArrayList;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TriggerRegisterArg {
    private String androidDefaultPlatform;
    public String getAndroidDefaultPlatform() { return androidDefaultPlatform; }
    public void setAndroidDefaultPlatform(String setterArg) { this.androidDefaultPlatform = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("androidDefaultPlatform", androidDefaultPlatform);
      return toMapResult;
    }
    static TriggerRegisterArg fromMap(HashMap map) {
      TriggerRegisterArg fromMapResult = new TriggerRegisterArg();
      Object androidDefaultPlatform = map.get("androidDefaultPlatform");
      fromMapResult.androidDefaultPlatform = (String)androidDefaultPlatform;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IosRegisterCallbackArg {
    private Boolean success;
    public Boolean getSuccess() { return success; }
    public void setSuccess(Boolean setterArg) { this.success = setterArg; }

    private String deviceToken;
    public String getDeviceToken() { return deviceToken; }
    public void setDeviceToken(String setterArg) { this.deviceToken = setterArg; }

    private String errorMessage;
    public String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(String setterArg) { this.errorMessage = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("success", success);
      toMapResult.put("deviceToken", deviceToken);
      toMapResult.put("errorMessage", errorMessage);
      return toMapResult;
    }
    static IosRegisterCallbackArg fromMap(HashMap map) {
      IosRegisterCallbackArg fromMapResult = new IosRegisterCallbackArg();
      Object success = map.get("success");
      fromMapResult.success = (Boolean)success;
      Object deviceToken = map.get("deviceToken");
      fromMapResult.deviceToken = (String)deviceToken;
      Object errorMessage = map.get("errorMessage");
      fromMapResult.errorMessage = (String)errorMessage;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AndroidOnRegisterSucceedCallbackArg {
    private String platformName;
    public String getPlatformName() { return platformName; }
    public void setPlatformName(String setterArg) { this.platformName = setterArg; }

    private String regId;
    public String getRegId() { return regId; }
    public void setRegId(String setterArg) { this.regId = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("platformName", platformName);
      toMapResult.put("regId", regId);
      return toMapResult;
    }
    static AndroidOnRegisterSucceedCallbackArg fromMap(HashMap map) {
      AndroidOnRegisterSucceedCallbackArg fromMapResult = new AndroidOnRegisterSucceedCallbackArg();
      Object platformName = map.get("platformName");
      fromMapResult.platformName = (String)platformName;
      Object regId = map.get("regId");
      fromMapResult.regId = (String)regId;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AndroidGetRegisterIdCallbackArg {
    private Boolean success;
    public Boolean getSuccess() { return success; }
    public void setSuccess(Boolean setterArg) { this.success = setterArg; }

    private String platformName;
    public String getPlatformName() { return platformName; }
    public void setPlatformName(String setterArg) { this.platformName = setterArg; }

    private String regId;
    public String getRegId() { return regId; }
    public void setRegId(String setterArg) { this.regId = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("success", success);
      toMapResult.put("platformName", platformName);
      toMapResult.put("regId", regId);
      return toMapResult;
    }
    static AndroidGetRegisterIdCallbackArg fromMap(HashMap map) {
      AndroidGetRegisterIdCallbackArg fromMapResult = new AndroidGetRegisterIdCallbackArg();
      Object success = map.get("success");
      fromMapResult.success = (Boolean)success;
      Object platformName = map.get("platformName");
      fromMapResult.platformName = (String)platformName;
      Object regId = map.get("regId");
      fromMapResult.regId = (String)regId;
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface FlutterPushNotificationHostApi {
    void triggerRegister(TriggerRegisterArg arg);
    void androidGetRegisterId();

    /** Sets up an instance of `FlutterPushNotificationHostApi` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, FlutterPushNotificationHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterPushNotificationHostApi.triggerRegister", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TriggerRegisterArg input = TriggerRegisterArg.fromMap((HashMap)message);
              api.triggerRegister(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterPushNotificationHostApi.androidGetRegisterId", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.androidGetRegisterId();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class FlutterPushNotificationFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public FlutterPushNotificationFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void iosRegisterCallback(IosRegisterCallbackArg argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterPushNotificationFlutterApi.iosRegisterCallback", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void androidOnRegisterSucceedCallback(AndroidOnRegisterSucceedCallbackArg argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterPushNotificationFlutterApi.androidOnRegisterSucceedCallback", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void androidGetRegisterIdCallback(AndroidGetRegisterIdCallbackArg argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterPushNotificationFlutterApi.androidGetRegisterIdCallback", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", null);
    errorMap.put("details", null);
    return errorMap;
  }
}
