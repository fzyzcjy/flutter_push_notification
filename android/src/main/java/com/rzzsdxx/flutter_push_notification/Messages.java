// Autogenerated from Pigeon (v0.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.rzzsdxx.flutter_push_notification;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.ArrayList;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IosDidRegisterRequest {
    private String deviceTokenBase64;
    public String getDeviceTokenBase64() { return deviceTokenBase64; }
    public void setDeviceTokenBase64(String setterArg) { this.deviceTokenBase64 = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("deviceTokenBase64", deviceTokenBase64);
      return toMapResult;
    }
    static IosDidRegisterRequest fromMap(HashMap map) {
      IosDidRegisterRequest fromMapResult = new IosDidRegisterRequest();
      Object deviceTokenBase64 = map.get("deviceTokenBase64");
      fromMapResult.deviceTokenBase64 = (String)deviceTokenBase64;
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface FlutterPushNotificationHostApi {
    void iosRegisterForRemoteNotifications();

    /** Sets up an instance of `FlutterPushNotificationHostApi` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, FlutterPushNotificationHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterPushNotificationHostApi.iosRegisterForRemoteNotifications", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.iosRegisterForRemoteNotifications();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class FlutterPushNotificationFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public FlutterPushNotificationFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void iosDidRegister(IosDidRegisterRequest argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterPushNotificationFlutterApi.iosDidRegister", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void iosFailedRegister(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterPushNotificationFlutterApi.iosFailedRegister", new StandardMessageCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", null);
    errorMap.put("details", null);
    return errorMap;
  }
}
