// Autogenerated from Pigeon (v0.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = [NSDictionary dictionaryWithObjectsAndKeys:
        (error.code ? error.code : [NSNull null]), @"code",
        (error.message ? error.message : [NSNull null]), @"message",
        (error.details ? error.details : [NSNull null]), @"details",
        nil];
  }
  return [NSDictionary dictionaryWithObjectsAndKeys:
      (result ? result : [NSNull null]), @"result",
      errorDict, @"error",
      nil];
}

@interface FPNIosRegisterCallbackArg ()
+(FPNIosRegisterCallbackArg*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FPNAndroidOnRegisterSucceedCallbackArg ()
+(FPNAndroidOnRegisterSucceedCallbackArg*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FPNAndroidGetRegisterIdCallbackArg ()
+(FPNAndroidGetRegisterIdCallbackArg*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation FPNIosRegisterCallbackArg
+(FPNIosRegisterCallbackArg*)fromMap:(NSDictionary*)dict {
  FPNIosRegisterCallbackArg* result = [[FPNIosRegisterCallbackArg alloc] init];
  result.success = dict[@"success"];
  if ((NSNull *)result.success == [NSNull null]) {
    result.success = nil;
  }
  result.deviceToken = dict[@"deviceToken"];
  if ((NSNull *)result.deviceToken == [NSNull null]) {
    result.deviceToken = nil;
  }
  result.errorMessage = dict[@"errorMessage"];
  if ((NSNull *)result.errorMessage == [NSNull null]) {
    result.errorMessage = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.success ? self.success : [NSNull null]), @"success", (self.deviceToken ? self.deviceToken : [NSNull null]), @"deviceToken", (self.errorMessage ? self.errorMessage : [NSNull null]), @"errorMessage", nil];
}
@end

@implementation FPNAndroidOnRegisterSucceedCallbackArg
+(FPNAndroidOnRegisterSucceedCallbackArg*)fromMap:(NSDictionary*)dict {
  FPNAndroidOnRegisterSucceedCallbackArg* result = [[FPNAndroidOnRegisterSucceedCallbackArg alloc] init];
  result.platformName = dict[@"platformName"];
  if ((NSNull *)result.platformName == [NSNull null]) {
    result.platformName = nil;
  }
  result.regId = dict[@"regId"];
  if ((NSNull *)result.regId == [NSNull null]) {
    result.regId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.platformName ? self.platformName : [NSNull null]), @"platformName", (self.regId ? self.regId : [NSNull null]), @"regId", nil];
}
@end

@implementation FPNAndroidGetRegisterIdCallbackArg
+(FPNAndroidGetRegisterIdCallbackArg*)fromMap:(NSDictionary*)dict {
  FPNAndroidGetRegisterIdCallbackArg* result = [[FPNAndroidGetRegisterIdCallbackArg alloc] init];
  result.success = dict[@"success"];
  if ((NSNull *)result.success == [NSNull null]) {
    result.success = nil;
  }
  result.platformName = dict[@"platformName"];
  if ((NSNull *)result.platformName == [NSNull null]) {
    result.platformName = nil;
  }
  result.regId = dict[@"regId"];
  if ((NSNull *)result.regId == [NSNull null]) {
    result.regId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.success ? self.success : [NSNull null]), @"success", (self.platformName ? self.platformName : [NSNull null]), @"platformName", (self.regId ? self.regId : [NSNull null]), @"regId", nil];
}
@end

void FPNFlutterPushNotificationHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FPNFlutterPushNotificationHostApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.FlutterPushNotificationHostApi.triggerRegister"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api triggerRegister:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.FlutterPushNotificationHostApi.androidGetRegisterId"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api androidGetRegisterId:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FPNFlutterPushNotificationFlutterApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation FPNFlutterPushNotificationFlutterApi
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    self.binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)iosRegisterCallback:(FPNIosRegisterCallbackArg*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterPushNotificationFlutterApi.iosRegisterCallback"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
- (void)androidOnRegisterSucceedCallback:(FPNAndroidOnRegisterSucceedCallbackArg*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterPushNotificationFlutterApi.androidOnRegisterSucceedCallback"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
- (void)androidGetRegisterIdCallback:(FPNAndroidGetRegisterIdCallbackArg*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterPushNotificationFlutterApi.androidGetRegisterIdCallback"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
@end
